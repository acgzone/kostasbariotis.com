{"version":3,"sources":["webpack:///path---drafts-page-1-7141315feeb3f4f5b2a3.js","webpack:///./.cache/json/drafts-page-1.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/drafts-page-1.json","module","exports","data","site","siteMetadata","title","description","siteUrl","pathContext","posts","excerpt","html","id","timeToRead","frontmatter","date","path","tags","draft","page","pagesSum","prevPath","nextPath"],"mappings":"AAAAA,cAAc,iBAERC,uEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,YAAA,2LAAAC,QAAA,gCAAkRC,aAAgBC,QAAUC,QAAA,4PAAAC,KAAA,q5DAAAC,GAAA,mIAAAC,WAAA,EAAAC,aAAw0EC,KAAA,aAAAC,KAAA,sCAAAC,KAAA,KAAAZ,MAAA,mCAAAa,OAAA,KAAwIR,QAAA,4PAAAC,KAAA,0roBAAuypBC,GAAA,4HAAAC,WAAA,EAAAC,aAAmZC,KAAA,2BAAAC,KAAA,wBAAAC,KAAA,uCAAAZ,MAAA,oEAAAa,OAAA,KAA2MR,QAAA,qPAAAC,KAAA;AAAyrGC,GAAA,wIAAAC,WAAA,EAAAC,aAAi0LC,KAAA,2BAAAC,KAAA,2CAAAC,KAAA,KAAAZ,MAAA,kCAAAa,OAAA,KAA0JR,QAAA,GAAAC,KAAA,GAAAC,GAAA,iJAAAC,WAAA,EAAAC,aAA2MC,KAAA,2BAAAC,KAAA,oDAAAC,KAAA,gBAAAZ,MAAA,4CAAAa,OAAA,KAAwLR,QAAA,yPAAAC,KAAA,+mtBAAstuBC,GAAA,8HAAAC,WAAA,EAAAC,aAAujBC,KAAA,2BAAAC,KAAA,0BAAAC,KAAA,KAAAZ,MAAA,wBAAAa,OAAA,KAA6HC,KAAA,EAAAC,SAAA,EAAAC,SAAA,KAAAC,SAAA","file":"path---drafts-page-1-7141315feeb3f4f5b2a3.js","sourcesContent":["webpackJsonp([56240726505197],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/drafts-page-1.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Let's have a word on premature optimization, on other words, over engineering. The problem with premature optimization is when you are trying to forecast the future. When being biased by what you believe will happen when in reality the requirements…\",\"html\":\"<p>Let's have a word on premature optimization, on other words, over engineering.</p>\\n<p>The problem with premature optimization is when you are trying to forecast the future. When being biased by what you believe will happen when in reality the requirements are quite different. As a result, you end up spending time on something that is merely going to be needed and you could just spend less time producing the same outcome.</p>\\n<p>Consider the requirement:</p>\\n<blockquote>\\n<p>We need an API to support our current 100 customers.</p>\\n</blockquote>\\n<p>And now this:</p>\\n<blockquote>\\n<p>We need an API to support our current 100 customers but also 1000 customers that we expect to have at the end of the year based on our customer aquisition report and our current marketing strategy.</p>\\n</blockquote>\\n<p>And also this:</p>\\n<blockquote>\\n<p>We need an API to support our current 100 customers plus another 900 customers that may come in the future.</p>\\n</blockquote>\\n<p>Yes, a Kubernetes cluster built on AWS will serve the requirements quite good. But so a DigitalOcean VM with a Node.js server will do.</p>\\n<p>As engineers, we tend to look for the absolute perfect solution on every subject. Quite a few times, that's not the matter. Instead of setting that Kubernetes cluster, spend half of the time to setup the smallest VM and spend the rest of the time to the rest of the backlog.</p>\\n<p>Think wisely and most importantly, think in the long term. Can you be sure that the thing you spend most of your time on will best serve your interests five years from now? How can you spend your time on something that will allow you to have more free time in the long term?</p>\\n<p>What was the biggest premature optimization you did in your career?</p>\\n<p><strong>Did you know about the common <a href=\\\"https://hackernoon.com/cognitive-biases-in-programming-5e937707c27b\\\">cognitive biases of programmers?</a></strong></p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/a-word-on-over-engineering/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2017-12-02\",\"path\":\"/drafts/a-word-on-over-engineering/\",\"tags\":null,\"title\":\"A word on premature optimization\",\"draft\":true}},{\"excerpt\":\"On this post, I will go through the process of creating a landing page using Gatsby.js and BootstrapCSS framework. I use the same process for all my projects and products and I can certainly say that it works like a charm every time. Gatsby.js will…\",\"html\":\"<p>On this post, I will go through the process of creating a landing page using Gatsby.js and BootstrapCSS framework. I use the same process for all my projects and products and I can certainly say that it works like a charm every time.</p>\\n<p>Gatsby.js will allow us to describe our page's functionality and appearence with React.js and take full advantage of React's ecosystem. Using BootstrapCSS we will be able create fast prototypes for our various components we are going to need for our page. For start, we will use a ready made template found free over the Web.</p>\\n<p>For a quick introduction to Gatsby and it's benefits, I wrote an article recently that you may be find interesting.</p>\\n<p>This tutorial requires basic knowledge of the React.js framework and ofcourse HTML/CSS. Node.js and npm must be installed on your system.</p>\\n<p>Let's start.</p>\\n<h2>Set up Gatsby.js</h2>\\n<p><code>$> npm install -g gatsby</code></p>\\n<p>Then create a new Gatsby.js project using the Gatsby CLI.</p>\\n<p>We will fire the command:</p>\\n<p><code>$> gatsby new gatsby-tutorial</code></p>\\n<p>The above will create a folder structure that is ready to be build. The structure is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>src\\n|- layouts\\n   |- index.css\\n   |- index.js\\n|- pages\\n   |- 404.js\\n   |- index.js\\n   |- page-2.js\\n.gitignore\\npackage-lock.json\\npackage.json\\ngatsby-config.js</code></pre>\\n      </div>\\n<p>Let's have a look on these files and folders.</p>\\n<p><code>.gitignore</code> comes preconfigured with all files and folders used by Gatsby and needs to be ignored. You can add more entries but do not remove those already in there.</p>\\n<p><code>package.json</code> and <code>package-lock.json</code> are used by npm and have the dependencies needed to run and build the Gatsby project.</p>\\n<p><code>gatsby-config.js</code> is a configuration file for Gatsby. We will add our plugins in there and also static information we need available on our site.</p>\\n<p>The <code>layouts</code> will host different layouts for our site. For this tutorial, we will only need one layout, the default one. We will replace the <code>index.css</code> file with our SCSS file later on.</p>\\n<p>The <code>pages</code> folder contains all our different pages. The <code>index.js</code> file is our homepage. The <code>404.js</code> is the one that will be shown when a route was not found and the <code>page-2.js</code> is just another page.</p>\\n<p>Now that we have a better understanding of Gatsby's folder structure, we will add BootstapCSS. Open a terminal and type:</p>\\n<p><code>$>npm i --save-dev bootstrap-scss</code></p>\\n<p>We are installing the SCSS version of Bootstrap, in order to selectively import the modules we want, instead of just importing it all.</p>\\n<p>Now by default, Gatsby won't understand an SCSS file. We need to add a <a href=\\\"https://www.gatsbyjs.org/packages/gatsby-plugin-sass/\\\">plugin</a> that will compile our SCSS files.</p>\\n<p>On your terminal again, type:</p>\\n<p><code>$>npm i --save-dev gatsby-plugin-sass</code></p>\\n<p>and then include the plugin in your <code>gatsby-config.js</code> file like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code>// in gatsby-config.js\\nplugins<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n  `gatsby-plugin-sass`\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>Great! Now our Gatsby project is ready to be modified and add our own template. You may test it and see that everything went right:</p>\\n<p>On your terminal:</p>\\n<p><code>$>npm run develop</code></p>\\n<p>This will start Gatsby on development mode and instruct you to open your browser on a specific host. Open it and you will the Gatsby's starter site.</p>\\n<h2>Add your own template</h2>\\n<p>Now, for the scope of this tutorial, we will use a ready made template found on the internet. We will use <a href=\\\"http://blacktie.co/2015/03/sumo-landing-html-wordpress-landing-page/\\\">this one</a> that I found and seems great for this tutorial. Download it and extract it. You will see that it's a huge HTML file and has Bootstrap and JQuery as a dependency and has a <code>style.css</code> file that contains the custom styles of the template.</p>\\n<p>Now what we will do, is to copy everything inside <code>&#x3C;body></code> and paste it inside our <code>pages/index.js</code> component's <code>render</code> method. Then we will need to rename all <code>class</code> attributes to <code>className</code> (cause thats what React understands). Do not copy the <code>&#x3C;script></code> at the end.</p>\\n<p>You will also notice that there are some <code>&#x3C;img></code> tags pointing to static assets. First copy those assets inside your <code>src</code> folder (make a subdirectory). Then we will require them first and then inject them inside our Markup. So, on top of the <code>index.js</code> file add a line for each of our images:</p>\\n<p>So we will turn this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">&lt;!-- old index.html file --></span>\\n...\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>#<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>img</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>assets/img/app-store.png<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">height</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>50<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">alt</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span><span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span>\\n...\\n</code></pre>\\n      </div>\\n<p>into this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// src/index.js</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token keyword\\\">const</span> appStoreImg <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>'<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span>assets<span class=\\\"token operator\\\">/</span>images<span class=\\\"token operator\\\">/</span>app<span class=\\\"token operator\\\">-</span>store<span class=\\\"token punctuation\\\">.</span>png<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">...</span>\\n\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>#<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>img</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>appStoreImg<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">height</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>50<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">alt</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span><span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>So with this we are comming to the understanding, that Gatsby will compile everything inside <code>src</code> folder so there will be no paths that we can use before compiling. By doing the above, we are instructing Gatsby to do whatever it needs to be done with the <code>app-store.png</code> image, then figure out it's path and inject it into our <code>&#x3C;img></code> tag.</p>\\n<p>Now that we have our images in place, we need the custom style that comes with our template. We could just copy paste everything inside our <code>layouts/index.css</code> file, but remember that we indentionally decided to add SCSS support in order to selectively add our Bootstrap modules we want. So, we will rename and move our <code>layouts/index.css</code> into <code>scss/index.scss</code> that will contains:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>import \\\"./bootstrap\\\"\\nimport \\\"./custom\\\"</code></pre>\\n      </div>\\n<p>The create two more files, <code>layouts/bootstrap.scss</code> and <code>layouts/custom.scss</code>. <code>layouts/bootstrap.scss</code> will contain all our imports for Bootstrap, like that:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code>@charset <span class=\\\"token string\\\">\\\"UTF-8\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token property\\\"><span class=\\\"token variable\\\">$bootstrap-sass-asset-helper</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/variables\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token property\\\"><span class=\\\"token variable\\\">$font-size-base</span></span><span class=\\\"token punctuation\\\">:</span> 16px<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/mixins\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/normalize\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/print\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/glyphicons\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/scaffolding\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/type\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/code\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/forms\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/navbar\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/navs\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/component-animations\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/utilities\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/responsive-utilities\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Notice how we selectively add the Bootstrap modules we want and how we override Bootstrap's variables. This way our final bundle will be less in size and we can also configure Bootstrap without overriding it's values and thus adding more code.</p>\\n<p>Now in our <code>scss/custom.scss</code> we will paste the styles from the template (remeber to fix any url paths errors). CSS is valid SCSS so it should be functioning as before and we can extend it by adding SCSS mixins and variables. That's up to us.</p>\\n<h2>Multiple pages</h2>\\n<p>Besides everything else, Gatsby does it great when it comes to multiple pages of our site. To demonstrate this behavior, we will break our landing page into two pages and extract the pricing section to another page.</p>\\n<p>You will find the different sections of the landing page at <code>src/pages/index.js</code>. We will create another file, <code>src/page/pricing.js</code> and extract the pricing and the testimonials section right there.</p>\\n<p>Navigate over at <code>localhost:8000/pricing</code> and you will notice that we are missing our header and footer. But we don't have to keep them on every page so we will extract them from the index page and move them to our <code>layouts/index.js</code> file.</p>\\n<p>I don't want the form to be on every page too, so I am going to do some modifications that you will find over at the repository of this project.</p>\\n<p>Notice also the use of <code>Link</code> component. Gatsby uses this component to track your pages and the transitions, in order to be able to smooth client side navigation.</p>\\n<h2>Contact form</h2>\\n<p>Now that our page has some visual form and we are happy with the result, we can start adding some functionalities. To start with, we will make the subscription form on the header functional!</p>\\n<p>Since our index page is just a React component, we can just start adding functionality as we know. Let's add an event to fire once the Subscribe button is clicked and send the email to our server.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IndexPage</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      email<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleEmailChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>value<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * Validate User's input first\\n     */</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      email<span class=\\\"token punctuation\\\">:</span> value\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleSubscribeClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * Email is in the state,\\n     * send it directly to your server\\n     */</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  render <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>and the form inside <code>render</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code>...\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>form</span> <span class=\\\"token attr-name\\\">role</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>form<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">action</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>register.php<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">method</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>post<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">enctype</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>plain<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  &lt;input\\n    type=\\\"email\\\"\\n    name=\\\"email\\\"\\n    className=\\\"subscribe-input\\\"\\n    placeholder=\\\"Enter your e-mail address...\\\"\\n    required\\n    onChange={({target}) => this.handleEmailChange(target)}\\n  />\\n  &lt;button\\n    className='btn btn-conf btn-green'\\n    type=\\\"submit\\\"\\n    onClick={() => this.handleSubscribeClick()}>\\n    Start your free trial\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>form</span><span class=\\\"token punctuation\\\">></span></span>\\n...\\n</code></pre>\\n      </div>\\n<h2>The end</h2>\\n<p>Gatsby is an amazing static site generator that hides a lot of gems. You may find it's API complicated, but after</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/gatsby-landing-page/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":7,\"frontmatter\":{\"date\":\"2017-10-30T18:16:00.000Z\",\"path\":\"/gatsby-landing-page/\",\"tags\":\"Javascript, gatsby.js, react.js, SSR\",\"title\":\"Create an SEO friendly and performant landing page with Gatsby.js\",\"draft\":true}},{\"excerpt\":\"I have been working with a serverless architecture for the past one year. We have gone full serverless on the project we are currently working on and after a lot of research and trial and error, I came up with a pattern of organizing such an…\",\"html\":\"<p>I have been working with a serverless architecture for the past one year. We have gone full serverless on the project we are currently working on and after a lot of research and trial and error, I came up with a pattern of organizing such an architecture. This post will be an attempt to explain this approach and how it came to be.\\nThis post won't go deep on how various Serverless providers works and I certainly wont try to convince you to adopt it. My goal is to share my solution with you and ask for your feedback. I hope that my expirience will help somebody.</p>\\n<h2>No servers? Really?</h2>\\n<p>Let's start with the elephant in the room. Serverless doesn't mean \\\"no servers\\\".</p>\\n<img src=\\\"https://media.giphy.com/media/j2nATOAdRgYZq/giphy.gif\\\" alt=\\\"Serverless doesn't mean no servers\\\">\\n<p>It simply means that you don't have to worry about them. On my mind, serverless is another layer on top of the famous PaaS platforms. We are doing a step away from hiding the machines's specifics by hiding your application's specifics, such as the process management and the routing.</p>\\n<p>Ofcourse, you would still have to worry about databases and other components of your stack. But you can be sure that your code will always be running and not be tighted to one process that can bring your whole application down.</p>\\n<h2>Functions</h2>\\n<p>Taking the servers away, what have you left with? Code. Organized in functions. Thus the famous \\\"functions\\\" name you are seeing here and there.</p>\\n<p>Functions can be anything. Let's see an example:</p>\\n<p>Imagine a simple Node.js app with a router, two controllers attached to certain paths that call some models and return. We have two functions on that app and some bootstrap code. Remove the router and you are only left with two functions.</p>\\n<p>Let's try to do this the serverless way. I will be using AWS and the famous <a href=\\\"http://serverless.com\\\">serverless</a> framework. All we need for the example above are the two controllers and a serverless configuration file:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yml\\\"><code>service: serverless-example\\n\\nprovider:\\n  name: aws\\n  runtime: nodejs4.3\\n  environment:\\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\\n\\nfunctions:\\n  create:\\n    handler: users/register.handler\\n    events:\\n      - http: POST /users\\n  login:\\n    handler: users/login.handler\\n    events:\\n      - http:\\n          path: POST /users/login\\n\\nresources:\\n  Resources:\\n    UsersDynamoDbTable:\\n      Type: 'AWS::DynamoDB::Table'\\n      DeletionPolicy: Retain\\n      Properties:\\n        AttributeDefinitions:\\n          -\\n            AttributeName: id\\n            AttributeType: S\\n        KeySchema:\\n          -\\n            AttributeName: id\\n            KeyType: HASH\\n        ProvisionedThroughput:\\n          ReadCapacityUnits: 1\\n          WriteCapacityUnits: 1\\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}</code></pre>\\n      </div>\\n<p>The configuration is pretty straightforward. We want the AWS provider with the node4.3 runtime. Two AWS Lambda functions each tight to a certail API Gateway path and a DynamoDB table described as a Clouformation resource object. After this gets deployed, API Gateway will respond back with an AWS URL (e.g.: <a href=\\\"https://some-random-id.api.aws.com\\\">https://some-random-id.api.aws.com</a>) that we can hit to reach our two controllers.</p>\\n<p>And there you go. That's all it takes to create an API. Awesome, right?</p>\\n<p>With the ability to create so many functions in a gif, we could end up very fast in a hell that none knows where anything goes. This is where the Micro Functions architecture comes in. But before we dive into that, let's take a look and understand how AWS runs our code.</p>\\n<h2>Combining the pieces</h2>\\n<p>Essentially, the way to go about this, and the way AWS Lambdas works, is to spin up a instance for your functions each time an event arises and run those predefined functions. Routing and the exposure to the outside world is being handled by the API Gateway which will raise an event each time someone hits your endpoint and route it to the specific Lambda Function. So when you hit <code>https://some-random-id.api.aws.com/users/login</code> from the outside, an instance will be created and run the handler you have defined above.</p>\\n<p>The instance (that may be new(cold state) or may have been up for a while(hot state)) will start and run the function using the payload passed to API Gateway. It will then return the results back to API Gateway and it will pass it back to the client. That's really all there is in a serverless architecture.</p>\\n<p>The big question ofcourse here, is whether the cold/hot state is significant enough to prevent you from even thinking about getting into it. Truth is that I haven't seen any major latency, but it could also mean that there is a latency that we chose to not give attention to.</p>\\n<h2>The Micro Functions architecture</h2>\\n<p>Our project started growing quickly and became hard to test and add features to.</p>\\n<p>This style is derived by two major patterns, the microservices and the serverless architecture. The goal is to organize a codebase in a way that can support adding new features with ease, that is easily testable and can be managable and deployable with single terminal commands.</p>\\n<p>Microservices architecture is able to deliver all of the above (when done correctly) by splitting up the architecture in smaller, isolated services. Each service hide its internals by exposing a single API that allows other services to communicate with it. The communication protocol must be well defined and respected by all others.</p>\\n<p>What this architecture desribes is to divide your codebase into smaller services much like in a microservices architecture but to let each service to expose serverless functions instead of an entire application.</p>\\n<h3>Boundaries</h3>\\n<p>Each of these services handles a part of your business logic and doesnt share its internals with the others. They can be tested and deployed in isolation without affecting the others, much like in the microservices world.</p>\\n<h3>Communication</h3>\\n<p>The communication between these may be direct by calling each other or in an event based architecture through a message broker. Again, both of these are valid and in my experience both can work very well.</p>\\n<h3>Responsibility</h3>\\n<p>The responsibility for each Micro Function is up to you to decide. You can host an entire API in one function or have once function per action in a classic CRUD style.</p>\\n<p>An example:</p>\\n<p>Articles Service\\n|\\n| - Exposes a Micro Function called <code>API</code> that handles routing whether you want to fetch one Article or fetch all</p>\\n<p>Comments Service\\n|\\n| - Exposes a Micro Function called <code>getComment</code> that fetches one Comment\\n| - Exposes a Micro Function called <code>getComments</code> that fetches all Comments\\n| - Exposes a Micro Function called <code>getCommentsForArticle</code> that fetches all Comments for an Article</p>\\n<p><a href=\\\"https://serverless.com/blog/serverless-architecture-code-patterns/\\\">Both of these styles</a> are valid and it's up to you to decide</p>\\n<h3>Testing</h3>\\n<p>Testing</p>\\n<h2>Final words</h2>\\n<p>It seems like all of the majors infrastructure providers have invest a lot in the serverless infrastructure services. It may be something that will revoluniotize the way we build applications but certainly has a long way to go and reach the maturity of the current systems.</p>\\n<p>For us over at Quotelier, has served us great so far. It's cost effective and allows the developers to act on the infrastructure in a way that we can be sure that it won't bring everything down. We are not in the need of hiring a dedicated DevOps guy and we certainly don't feel like missing something. For the record, here are some pros and cons, we have found:</p>\\n<p>Pros:</p>\\n<ul>\\n<li>Cost effective: Over 100 AWS Lambdas and the cost is still zero (fact is that we are not yet in the actual user base size we would like to be)</li>\\n<li>Auto-scaling: We basically don't worry much about it</li>\\n<li>DevOps out of the box</li>\\n</ul>\\n<p>Cons:</p>\\n<ul>\\n<li>Vendor lock-in:</li>\\n<li>Not exactly simpler: Having less DevOps to do doesnt neccesarily means it's simpler. You still need basic knowledge of how things not only to be able to spin up an architecture like this but also to do it in the right way.</li>\\n<li>Development experience is still.. mehh</li>\\n</ul>\\n<p><a href=\\\"https://serverless.com/blog/serverless-conf-2017-nyc-recap/\\\">https://serverless.com/blog/serverless-conf-2017-nyc-recap/</a></p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/the-microfunctions-architecture/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":6,\"frontmatter\":{\"date\":\"2017-10-04T00:00:00.000Z\",\"path\":\"/drafts/the-microfunctions-architecture/\",\"tags\":null,\"title\":\"The Microfunctions architecture\",\"draft\":true}},{\"excerpt\":\"\",\"html\":\"\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/microservices-lets-talk-about-boundaries/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2017-03-10T00:00:00.000Z\",\"path\":\"/drafts/microservices-lets-talk-about-boundaries/\",\"tags\":\"MicroServices\",\"title\":\"Microservices: lets talk about boundaries\",\"draft\":true}},{\"excerpt\":\"Static site generators are amazing tools, hands down! I love working with  Jekyll  and here are some of the features you are missing if you aren't using one: Deduplication of common code blocks Write you code once, include it everywhere Template…\",\"html\":\"<p>Static site generators are amazing tools, hands down! I love working with <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a> and here are some of the features you are missing if you aren't using one:</p>\\n<ul>\\n<li>Deduplication of common code blocks</li>\\n</ul>\\n<p>Write you code once, include it everywhere</p>\\n<ul>\\n<li>Template engine</li>\\n</ul>\\n<p>You know, for loops, if conditionals, etc</p>\\n<ul>\\n<li>Separated data stores</li>\\n</ul>\\n<p>Separation of concerns</p>\\n<ul>\\n<li>Configuration management</li>\\n</ul>\\n<p>Generate multiple versions of your site based on the environment or whatever</p>\\n<p>I have been using Jekyll for a while now and I have to love it. I wouldn't say that it's the best since I've never used some other but I would love to hear from someone that has features that are missing from Jekyll.</p>\\n<p>So on this blog, I would like to present you with my minimal Jekyll configuration that I use on every site I work with. It has the form of a tutorial, so either follows steps below or grab directly the code from GitHub and start coding.</p>\\n<h2>Generate a new site</h2>\\n<p>Start by generating a new Jekyll project. Download and install <code>ruby</code>.</p>\\n<p><code>jekyll new .</code></p>\\n<h2>File and folders structure</h2>\\n<p>At first, you will notice that there is no markup at all. By default, Jekyll uses a theme that hides all that from you. But we need to inject our custom markup. Let's first remove the line <code>theme: minima</code> from _config.yml.</p>\\n<p>You will also notice a <code>_posts</code> folder with an example blog post inside. Let's not spend time on that. Maybe in another post. Delete the whole folder.</p>\\n<p>Now, open <code>about.md</code> and <code>index.md</code>. Those are the main pages of our site the index page and the about page. Every file you put there, Jekyll will generate a new page with that page in that path.</p>\\n<p>About's page content:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token key atrule\\\">layout</span><span class=\\\"token punctuation\\\">:</span> page\\n<span class=\\\"token key atrule\\\">title</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"About\\\"</span>\\n<span class=\\\"token key atrule\\\">permalink</span><span class=\\\"token punctuation\\\">:</span> /about/\\n<span class=\\\"token punctuation\\\">---</span>\\n</code></pre>\\n      </div>\\n<p>Now, this is Jekyll's frontmatter. We are requesting here this page to be generated with the default layout, have that specific title and be the <code>index.html</code> in the root directory. Jekyll will either copy paste every HTML file as is inside the final folder or will generate HTML files as told. This is what we do here, we are instructing Jekyll to generate an <code>index.html</code> file in the root directory.</p>\\n<p>Index page uses the home layout. But what are these layouts? Glad you finally asked. Those layouts were being hidden again by the default time. Let's write our own. Let's have one for start. Create the <code>_layouts/default.html</code> file and put inside:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-xml\\\"><code><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span> <span class=\\\"token attr-name\\\">lang</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>en<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>viewport<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">content</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>width<span class=\\\"token punctuation\\\">=</span>device-width, initial-scale<span class=\\\"token punctuation\\\">=</span>1.0<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">http-equiv</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>X-UA-Compatible<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">content</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ie<span class=\\\"token punctuation\\\">=</span>edge<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Document<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n{{ content }}\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>This is a basic HTML structure with the <code>{{content}}</code> directive. This directive will render everything from a page that has extend that layout.</p>\\n<p>Great! Now we have a layout as well. I don't like HTML files laying around at the root directory. Let's have a separate folder for our pages. Create a <code>pages</code> folder in the root directory. The underscore demotes that this folder will be processed by Jekyll. Now we need an index page. Create an <code>index</code> folder inside <code>_pages</code> with an index.html file inside. Put inside the below snippet:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token key atrule\\\">layout</span><span class=\\\"token punctuation\\\">:</span> default\\n<span class=\\\"token key atrule\\\">title</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"WOW Jekyll\\\"</span>\\n<span class=\\\"token key atrule\\\">permalink</span><span class=\\\"token punctuation\\\">:</span> index.html\\n<span class=\\\"token punctuation\\\">---</span>\\n&lt;h1<span class=\\\"token punctuation\\\">></span>Hello world&lt;/h1<span class=\\\"token punctuation\\\">></span>\\n</code></pre>\\n      </div>\\n<p>Do the same for the about page. This way, we will keep only configuration files in the root directory and have our content in respective folders.</p>\\n<p>Let's proceed with the 404 page. Same thing, create a <code>pages/404/index.html</code> with contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token key atrule\\\">layout</span><span class=\\\"token punctuation\\\">:</span> default\\n<span class=\\\"token key atrule\\\">title</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"404 Not Found\\\"</span>\\n<span class=\\\"token key atrule\\\">permalink</span><span class=\\\"token punctuation\\\">:</span> 404.html\\n<span class=\\\"token punctuation\\\">---</span>\\n&lt;h1<span class=\\\"token punctuation\\\">></span>Not found&lt;/h1<span class=\\\"token punctuation\\\">></span>\\n</code></pre>\\n      </div>\\n<p>And here's our 404 page that our HTTP server will server whenever doesn't find a corresponding route.</p>\\n<p>Fire <code>jekyll serve</code> and open the displayed link in your browser. You will see our index page.</p>\\n<p>Go to an undefined route and you will see our 404 page.</p>\\n<h2>Webpack integration</h2>\\n<p>Now that we have our basic file structure, we need a way to handle our frontend assets. I am using NPM for my JS dependencies. Same with CSS dependencies plus the SASS preprocessor. Let's first, create a folder to put all these there. Create a <code>_sources</code> folder and <code>js</code> and <code>sass</code> folders inside.</p>\\n<p>Let's first initialize NPM.</p>\\n<p><code>npm init</code></p>\\n<p>follow the instructions until you are finished.</p>\\n<p>Proceed with installing webpack and it's dependencies.</p>\\n<p><code>npm i --save webpack style-loader file-loader extract-text-webpack-plugin css-loader postcss-loader webpack-dev-server sass-loader node-sass webpack</code></p>\\n<p>Now let's install Bootstrap.</p>\\n<p><code>npm i --save bootstrap-sass</code></p>\\n<p>We are going to use a few Bootstrap's core modules like the typography and the grid. I am not going to use Bootstrap's JS modules since they require jQuery.</p>\\n<p>We will use <code>webpack</code> to process the files from that folder and put them inside <code>assets</code> folder. Jekyll will copy that folder inside the final build.</p>\\n<p>Create an <code>webpack.config.js</code> to the root directory. Put there the contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> webpack <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'webpack'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> ExtractTextPlugin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'extract-text-webpack-plugin'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  entry<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    main<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>__dirname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/source/sass/main.scss`</span></span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'index-page'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>__dirname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/source/js/index-page.js`</span></span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/path.join(__dirname, ../static/'),\\\"</span>\\n    publicpath<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/'/',\\\"</span>\\n    filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'js/[name].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  module<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    loaders<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.scss$/</span><span class=\\\"token punctuation\\\">,</span>\\n        loader<span class=\\\"token punctuation\\\">:</span> ExtractTextPlugin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">extract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          fallback<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'style-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n          use<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n              loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'css-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n              options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                sourceMap<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n              loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'postcss-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n              options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                sourceMap<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n                plugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n                    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'precss'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'autoprefixer'</span><span class=\\\"token punctuation\\\">)</span>\\n                  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n              loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'sass-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n              options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                sourceMap<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        include<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>__dirname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/source/sass`</span></span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  plugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ExtractTextPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'css/style.css'</span><span class=\\\"token punctuation\\\">,</span>\\n      allChunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  devtool<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'eval-cheap-module-source-map'</span><span class=\\\"token punctuation\\\">,</span>\\n  devServer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    inline<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    proxy<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">\\\"**\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"http://localhost:4000\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    host<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'0.0.0.0'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>So webpack will process our main <code>scss</code> file and put it into <code>assets/css/style.css</code>. Jekyll will be able to grab it from there. Also, JS files will be processed, be bundled and put into <code>assets/js</code> as a separate file for each of our pages.</p>\\n<p>Last, we have enabled <code>webpack-dev-server</code> and make it a proxy to Jekyll's host and port. So, in order to use it and have all the good stuff like Hot module replacement we will use that server on development.</p>\\n<p>All we need now is to include them into our layout file.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span> <span class=\\\"token attr-name\\\">lang</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>en<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>viewport<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">content</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>width<span class=\\\"token punctuation\\\">=</span>device-width, initial-scale<span class=\\\"token punctuation\\\">=</span>1.0<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">http-equiv</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>X-UA-Compatible<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">content</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ie<span class=\\\"token punctuation\\\">=</span>edge<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>{{page.title || site.title}}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n  &lt;link rel=\\\"stylesheet\\\" href../static/css/main.css\\\">\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n{{ content }}\\n&lt;script src../static/js/entry.js\\\"><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>Fire up webpack's dev server:</p>\\n<p><code>./node_modules/.bin/webpack-dev-server --inline --hot</code></p>\\n<h2>NPM Scripts</h2>\\n<p>Now that everything is in place, we want to take advantage of webpack's cool dev features like hot module replacement, etc. To do this we need</p>\\n<h2>Deployment</h2>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/Jekyll + webpack = ❤️/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":5,\"frontmatter\":{\"date\":\"2017-02-25T00:00:00.000Z\",\"path\":\"/drafts/jekyll-webpack/\",\"tags\":null,\"title\":\"Jekyll + webpack = ❤️\",\"draft\":true}}],\"page\":1,\"pagesSum\":4,\"prevPath\":null,\"nextPath\":\"/drafts/page/2\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---drafts-page-1-7141315feeb3f4f5b2a3.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Let's have a word on premature optimization, on other words, over engineering. The problem with premature optimization is when you are trying to forecast the future. When being biased by what you believe will happen when in reality the requirements…\",\"html\":\"<p>Let's have a word on premature optimization, on other words, over engineering.</p>\\n<p>The problem with premature optimization is when you are trying to forecast the future. When being biased by what you believe will happen when in reality the requirements are quite different. As a result, you end up spending time on something that is merely going to be needed and you could just spend less time producing the same outcome.</p>\\n<p>Consider the requirement:</p>\\n<blockquote>\\n<p>We need an API to support our current 100 customers.</p>\\n</blockquote>\\n<p>And now this:</p>\\n<blockquote>\\n<p>We need an API to support our current 100 customers but also 1000 customers that we expect to have at the end of the year based on our customer aquisition report and our current marketing strategy.</p>\\n</blockquote>\\n<p>And also this:</p>\\n<blockquote>\\n<p>We need an API to support our current 100 customers plus another 900 customers that may come in the future.</p>\\n</blockquote>\\n<p>Yes, a Kubernetes cluster built on AWS will serve the requirements quite good. But so a DigitalOcean VM with a Node.js server will do.</p>\\n<p>As engineers, we tend to look for the absolute perfect solution on every subject. Quite a few times, that's not the matter. Instead of setting that Kubernetes cluster, spend half of the time to setup the smallest VM and spend the rest of the time to the rest of the backlog.</p>\\n<p>Think wisely and most importantly, think in the long term. Can you be sure that the thing you spend most of your time on will best serve your interests five years from now? How can you spend your time on something that will allow you to have more free time in the long term?</p>\\n<p>What was the biggest premature optimization you did in your career?</p>\\n<p><strong>Did you know about the common <a href=\\\"https://hackernoon.com/cognitive-biases-in-programming-5e937707c27b\\\">cognitive biases of programmers?</a></strong></p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/a-word-on-over-engineering/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2017-12-02\",\"path\":\"/drafts/a-word-on-over-engineering/\",\"tags\":null,\"title\":\"A word on premature optimization\",\"draft\":true}},{\"excerpt\":\"On this post, I will go through the process of creating a landing page using Gatsby.js and BootstrapCSS framework. I use the same process for all my projects and products and I can certainly say that it works like a charm every time. Gatsby.js will…\",\"html\":\"<p>On this post, I will go through the process of creating a landing page using Gatsby.js and BootstrapCSS framework. I use the same process for all my projects and products and I can certainly say that it works like a charm every time.</p>\\n<p>Gatsby.js will allow us to describe our page's functionality and appearence with React.js and take full advantage of React's ecosystem. Using BootstrapCSS we will be able create fast prototypes for our various components we are going to need for our page. For start, we will use a ready made template found free over the Web.</p>\\n<p>For a quick introduction to Gatsby and it's benefits, I wrote an article recently that you may be find interesting.</p>\\n<p>This tutorial requires basic knowledge of the React.js framework and ofcourse HTML/CSS. Node.js and npm must be installed on your system.</p>\\n<p>Let's start.</p>\\n<h2>Set up Gatsby.js</h2>\\n<p><code>$> npm install -g gatsby</code></p>\\n<p>Then create a new Gatsby.js project using the Gatsby CLI.</p>\\n<p>We will fire the command:</p>\\n<p><code>$> gatsby new gatsby-tutorial</code></p>\\n<p>The above will create a folder structure that is ready to be build. The structure is:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>src\\n|- layouts\\n   |- index.css\\n   |- index.js\\n|- pages\\n   |- 404.js\\n   |- index.js\\n   |- page-2.js\\n.gitignore\\npackage-lock.json\\npackage.json\\ngatsby-config.js</code></pre>\\n      </div>\\n<p>Let's have a look on these files and folders.</p>\\n<p><code>.gitignore</code> comes preconfigured with all files and folders used by Gatsby and needs to be ignored. You can add more entries but do not remove those already in there.</p>\\n<p><code>package.json</code> and <code>package-lock.json</code> are used by npm and have the dependencies needed to run and build the Gatsby project.</p>\\n<p><code>gatsby-config.js</code> is a configuration file for Gatsby. We will add our plugins in there and also static information we need available on our site.</p>\\n<p>The <code>layouts</code> will host different layouts for our site. For this tutorial, we will only need one layout, the default one. We will replace the <code>index.css</code> file with our SCSS file later on.</p>\\n<p>The <code>pages</code> folder contains all our different pages. The <code>index.js</code> file is our homepage. The <code>404.js</code> is the one that will be shown when a route was not found and the <code>page-2.js</code> is just another page.</p>\\n<p>Now that we have a better understanding of Gatsby's folder structure, we will add BootstapCSS. Open a terminal and type:</p>\\n<p><code>$>npm i --save-dev bootstrap-scss</code></p>\\n<p>We are installing the SCSS version of Bootstrap, in order to selectively import the modules we want, instead of just importing it all.</p>\\n<p>Now by default, Gatsby won't understand an SCSS file. We need to add a <a href=\\\"https://www.gatsbyjs.org/packages/gatsby-plugin-sass/\\\">plugin</a> that will compile our SCSS files.</p>\\n<p>On your terminal again, type:</p>\\n<p><code>$>npm i --save-dev gatsby-plugin-sass</code></p>\\n<p>and then include the plugin in your <code>gatsby-config.js</code> file like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code>// in gatsby-config.js\\nplugins<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n  `gatsby-plugin-sass`\\n<span class=\\\"token punctuation\\\">]</span>\\n</code></pre>\\n      </div>\\n<p>Great! Now our Gatsby project is ready to be modified and add our own template. You may test it and see that everything went right:</p>\\n<p>On your terminal:</p>\\n<p><code>$>npm run develop</code></p>\\n<p>This will start Gatsby on development mode and instruct you to open your browser on a specific host. Open it and you will the Gatsby's starter site.</p>\\n<h2>Add your own template</h2>\\n<p>Now, for the scope of this tutorial, we will use a ready made template found on the internet. We will use <a href=\\\"http://blacktie.co/2015/03/sumo-landing-html-wordpress-landing-page/\\\">this one</a> that I found and seems great for this tutorial. Download it and extract it. You will see that it's a huge HTML file and has Bootstrap and JQuery as a dependency and has a <code>style.css</code> file that contains the custom styles of the template.</p>\\n<p>Now what we will do, is to copy everything inside <code>&#x3C;body></code> and paste it inside our <code>pages/index.js</code> component's <code>render</code> method. Then we will need to rename all <code>class</code> attributes to <code>className</code> (cause thats what React understands). Do not copy the <code>&#x3C;script></code> at the end.</p>\\n<p>You will also notice that there are some <code>&#x3C;img></code> tags pointing to static assets. First copy those assets inside your <code>src</code> folder (make a subdirectory). Then we will require them first and then inject them inside our Markup. So, on top of the <code>index.js</code> file add a line for each of our images:</p>\\n<p>So we will turn this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">&lt;!-- old index.html file --></span>\\n...\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>#<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>img</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>assets/img/app-store.png<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">height</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>50<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">alt</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span><span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span>\\n...\\n</code></pre>\\n      </div>\\n<p>into this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// src/index.js</span>\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token keyword\\\">const</span> appStoreImg <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span>'<span class=\\\"token punctuation\\\">.</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token operator\\\">/</span>assets<span class=\\\"token operator\\\">/</span>images<span class=\\\"token operator\\\">/</span>app<span class=\\\"token operator\\\">-</span>store<span class=\\\"token punctuation\\\">.</span>png<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token operator\\\">...</span>\\n\\n<span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>a</span> <span class=\\\"token attr-name\\\">href</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>#<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>img</span> <span class=\\\"token attr-name\\\">src</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>appStoreImg<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">height</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>50<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">alt</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span><span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>a</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>So with this we are comming to the understanding, that Gatsby will compile everything inside <code>src</code> folder so there will be no paths that we can use before compiling. By doing the above, we are instructing Gatsby to do whatever it needs to be done with the <code>app-store.png</code> image, then figure out it's path and inject it into our <code>&#x3C;img></code> tag.</p>\\n<p>Now that we have our images in place, we need the custom style that comes with our template. We could just copy paste everything inside our <code>layouts/index.css</code> file, but remember that we indentionally decided to add SCSS support in order to selectively add our Bootstrap modules we want. So, we will rename and move our <code>layouts/index.css</code> into <code>scss/index.scss</code> that will contains:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>import \\\"./bootstrap\\\"\\nimport \\\"./custom\\\"</code></pre>\\n      </div>\\n<p>The create two more files, <code>layouts/bootstrap.scss</code> and <code>layouts/custom.scss</code>. <code>layouts/bootstrap.scss</code> will contain all our imports for Bootstrap, like that:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-scss\\\"><code>@charset <span class=\\\"token string\\\">\\\"UTF-8\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token property\\\"><span class=\\\"token variable\\\">$bootstrap-sass-asset-helper</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/variables\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token property\\\"><span class=\\\"token variable\\\">$font-size-base</span></span><span class=\\\"token punctuation\\\">:</span> 16px<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/mixins\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/normalize\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/print\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/glyphicons\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/scaffolding\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/type\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/code\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/forms\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/navbar\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/navs\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/component-animations\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/utilities\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">@import</span> <span class=\\\"token string\\\">\\\"~bootstrap-sass/assets/stylesheets/bootstrap/responsive-utilities\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Notice how we selectively add the Bootstrap modules we want and how we override Bootstrap's variables. This way our final bundle will be less in size and we can also configure Bootstrap without overriding it's values and thus adding more code.</p>\\n<p>Now in our <code>scss/custom.scss</code> we will paste the styles from the template (remeber to fix any url paths errors). CSS is valid SCSS so it should be functioning as before and we can extend it by adding SCSS mixins and variables. That's up to us.</p>\\n<h2>Multiple pages</h2>\\n<p>Besides everything else, Gatsby does it great when it comes to multiple pages of our site. To demonstrate this behavior, we will break our landing page into two pages and extract the pricing section to another page.</p>\\n<p>You will find the different sections of the landing page at <code>src/pages/index.js</code>. We will create another file, <code>src/page/pricing.js</code> and extract the pricing and the testimonials section right there.</p>\\n<p>Navigate over at <code>localhost:8000/pricing</code> and you will notice that we are missing our header and footer. But we don't have to keep them on every page so we will extract them from the index page and move them to our <code>layouts/index.js</code> file.</p>\\n<p>I don't want the form to be on every page too, so I am going to do some modifications that you will find over at the repository of this project.</p>\\n<p>Notice also the use of <code>Link</code> component. Gatsby uses this component to track your pages and the transitions, in order to be able to smooth client side navigation.</p>\\n<h2>Contact form</h2>\\n<p>Now that our page has some visual form and we are happy with the result, we can start adding some functionalities. To start with, we will make the subscription form on the header functional!</p>\\n<p>Since our index page is just a React component, we can just start adding functionality as we know. Let's add an event to fire once the Subscribe button is clicked and send the email to our server.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-jsx\\\"><code><span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">IndexPage</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      email<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleEmailChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>value<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * Validate User's input first\\n     */</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      email<span class=\\\"token punctuation\\\">:</span> value\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleSubscribeClick</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n     * Email is in the state,\\n     * send it directly to your server\\n     */</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  render <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>and the form inside <code>render</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code>...\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>form</span> <span class=\\\"token attr-name\\\">role</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>form<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">action</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>register.php<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">method</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>post<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">enctype</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>plain<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  &lt;input\\n    type=\\\"email\\\"\\n    name=\\\"email\\\"\\n    className=\\\"subscribe-input\\\"\\n    placeholder=\\\"Enter your e-mail address...\\\"\\n    required\\n    onChange={({target}) => this.handleEmailChange(target)}\\n  />\\n  &lt;button\\n    className='btn btn-conf btn-green'\\n    type=\\\"submit\\\"\\n    onClick={() => this.handleSubscribeClick()}>\\n    Start your free trial\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>form</span><span class=\\\"token punctuation\\\">></span></span>\\n...\\n</code></pre>\\n      </div>\\n<h2>The end</h2>\\n<p>Gatsby is an amazing static site generator that hides a lot of gems. You may find it's API complicated, but after</p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/gatsby-landing-page/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":7,\"frontmatter\":{\"date\":\"2017-10-30T18:16:00.000Z\",\"path\":\"/gatsby-landing-page/\",\"tags\":\"Javascript, gatsby.js, react.js, SSR\",\"title\":\"Create an SEO friendly and performant landing page with Gatsby.js\",\"draft\":true}},{\"excerpt\":\"I have been working with a serverless architecture for the past one year. We have gone full serverless on the project we are currently working on and after a lot of research and trial and error, I came up with a pattern of organizing such an…\",\"html\":\"<p>I have been working with a serverless architecture for the past one year. We have gone full serverless on the project we are currently working on and after a lot of research and trial and error, I came up with a pattern of organizing such an architecture. This post will be an attempt to explain this approach and how it came to be.\\nThis post won't go deep on how various Serverless providers works and I certainly wont try to convince you to adopt it. My goal is to share my solution with you and ask for your feedback. I hope that my expirience will help somebody.</p>\\n<h2>No servers? Really?</h2>\\n<p>Let's start with the elephant in the room. Serverless doesn't mean \\\"no servers\\\".</p>\\n<img src=\\\"https://media.giphy.com/media/j2nATOAdRgYZq/giphy.gif\\\" alt=\\\"Serverless doesn't mean no servers\\\">\\n<p>It simply means that you don't have to worry about them. On my mind, serverless is another layer on top of the famous PaaS platforms. We are doing a step away from hiding the machines's specifics by hiding your application's specifics, such as the process management and the routing.</p>\\n<p>Ofcourse, you would still have to worry about databases and other components of your stack. But you can be sure that your code will always be running and not be tighted to one process that can bring your whole application down.</p>\\n<h2>Functions</h2>\\n<p>Taking the servers away, what have you left with? Code. Organized in functions. Thus the famous \\\"functions\\\" name you are seeing here and there.</p>\\n<p>Functions can be anything. Let's see an example:</p>\\n<p>Imagine a simple Node.js app with a router, two controllers attached to certain paths that call some models and return. We have two functions on that app and some bootstrap code. Remove the router and you are only left with two functions.</p>\\n<p>Let's try to do this the serverless way. I will be using AWS and the famous <a href=\\\"http://serverless.com\\\">serverless</a> framework. All we need for the example above are the two controllers and a serverless configuration file:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yml\\\"><code>service: serverless-example\\n\\nprovider:\\n  name: aws\\n  runtime: nodejs4.3\\n  environment:\\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\\n\\nfunctions:\\n  create:\\n    handler: users/register.handler\\n    events:\\n      - http: POST /users\\n  login:\\n    handler: users/login.handler\\n    events:\\n      - http:\\n          path: POST /users/login\\n\\nresources:\\n  Resources:\\n    UsersDynamoDbTable:\\n      Type: 'AWS::DynamoDB::Table'\\n      DeletionPolicy: Retain\\n      Properties:\\n        AttributeDefinitions:\\n          -\\n            AttributeName: id\\n            AttributeType: S\\n        KeySchema:\\n          -\\n            AttributeName: id\\n            KeyType: HASH\\n        ProvisionedThroughput:\\n          ReadCapacityUnits: 1\\n          WriteCapacityUnits: 1\\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}</code></pre>\\n      </div>\\n<p>The configuration is pretty straightforward. We want the AWS provider with the node4.3 runtime. Two AWS Lambda functions each tight to a certail API Gateway path and a DynamoDB table described as a Clouformation resource object. After this gets deployed, API Gateway will respond back with an AWS URL (e.g.: <a href=\\\"https://some-random-id.api.aws.com\\\">https://some-random-id.api.aws.com</a>) that we can hit to reach our two controllers.</p>\\n<p>And there you go. That's all it takes to create an API. Awesome, right?</p>\\n<p>With the ability to create so many functions in a gif, we could end up very fast in a hell that none knows where anything goes. This is where the Micro Functions architecture comes in. But before we dive into that, let's take a look and understand how AWS runs our code.</p>\\n<h2>Combining the pieces</h2>\\n<p>Essentially, the way to go about this, and the way AWS Lambdas works, is to spin up a instance for your functions each time an event arises and run those predefined functions. Routing and the exposure to the outside world is being handled by the API Gateway which will raise an event each time someone hits your endpoint and route it to the specific Lambda Function. So when you hit <code>https://some-random-id.api.aws.com/users/login</code> from the outside, an instance will be created and run the handler you have defined above.</p>\\n<p>The instance (that may be new(cold state) or may have been up for a while(hot state)) will start and run the function using the payload passed to API Gateway. It will then return the results back to API Gateway and it will pass it back to the client. That's really all there is in a serverless architecture.</p>\\n<p>The big question ofcourse here, is whether the cold/hot state is significant enough to prevent you from even thinking about getting into it. Truth is that I haven't seen any major latency, but it could also mean that there is a latency that we chose to not give attention to.</p>\\n<h2>The Micro Functions architecture</h2>\\n<p>Our project started growing quickly and became hard to test and add features to.</p>\\n<p>This style is derived by two major patterns, the microservices and the serverless architecture. The goal is to organize a codebase in a way that can support adding new features with ease, that is easily testable and can be managable and deployable with single terminal commands.</p>\\n<p>Microservices architecture is able to deliver all of the above (when done correctly) by splitting up the architecture in smaller, isolated services. Each service hide its internals by exposing a single API that allows other services to communicate with it. The communication protocol must be well defined and respected by all others.</p>\\n<p>What this architecture desribes is to divide your codebase into smaller services much like in a microservices architecture but to let each service to expose serverless functions instead of an entire application.</p>\\n<h3>Boundaries</h3>\\n<p>Each of these services handles a part of your business logic and doesnt share its internals with the others. They can be tested and deployed in isolation without affecting the others, much like in the microservices world.</p>\\n<h3>Communication</h3>\\n<p>The communication between these may be direct by calling each other or in an event based architecture through a message broker. Again, both of these are valid and in my experience both can work very well.</p>\\n<h3>Responsibility</h3>\\n<p>The responsibility for each Micro Function is up to you to decide. You can host an entire API in one function or have once function per action in a classic CRUD style.</p>\\n<p>An example:</p>\\n<p>Articles Service\\n|\\n| - Exposes a Micro Function called <code>API</code> that handles routing whether you want to fetch one Article or fetch all</p>\\n<p>Comments Service\\n|\\n| - Exposes a Micro Function called <code>getComment</code> that fetches one Comment\\n| - Exposes a Micro Function called <code>getComments</code> that fetches all Comments\\n| - Exposes a Micro Function called <code>getCommentsForArticle</code> that fetches all Comments for an Article</p>\\n<p><a href=\\\"https://serverless.com/blog/serverless-architecture-code-patterns/\\\">Both of these styles</a> are valid and it's up to you to decide</p>\\n<h3>Testing</h3>\\n<p>Testing</p>\\n<h2>Final words</h2>\\n<p>It seems like all of the majors infrastructure providers have invest a lot in the serverless infrastructure services. It may be something that will revoluniotize the way we build applications but certainly has a long way to go and reach the maturity of the current systems.</p>\\n<p>For us over at Quotelier, has served us great so far. It's cost effective and allows the developers to act on the infrastructure in a way that we can be sure that it won't bring everything down. We are not in the need of hiring a dedicated DevOps guy and we certainly don't feel like missing something. For the record, here are some pros and cons, we have found:</p>\\n<p>Pros:</p>\\n<ul>\\n<li>Cost effective: Over 100 AWS Lambdas and the cost is still zero (fact is that we are not yet in the actual user base size we would like to be)</li>\\n<li>Auto-scaling: We basically don't worry much about it</li>\\n<li>DevOps out of the box</li>\\n</ul>\\n<p>Cons:</p>\\n<ul>\\n<li>Vendor lock-in:</li>\\n<li>Not exactly simpler: Having less DevOps to do doesnt neccesarily means it's simpler. You still need basic knowledge of how things not only to be able to spin up an architecture like this but also to do it in the right way.</li>\\n<li>Development experience is still.. mehh</li>\\n</ul>\\n<p><a href=\\\"https://serverless.com/blog/serverless-conf-2017-nyc-recap/\\\">https://serverless.com/blog/serverless-conf-2017-nyc-recap/</a></p>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/the-microfunctions-architecture/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":6,\"frontmatter\":{\"date\":\"2017-10-04T00:00:00.000Z\",\"path\":\"/drafts/the-microfunctions-architecture/\",\"tags\":null,\"title\":\"The Microfunctions architecture\",\"draft\":true}},{\"excerpt\":\"\",\"html\":\"\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/microservices-lets-talk-about-boundaries/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2017-03-10T00:00:00.000Z\",\"path\":\"/drafts/microservices-lets-talk-about-boundaries/\",\"tags\":\"MicroServices\",\"title\":\"Microservices: lets talk about boundaries\",\"draft\":true}},{\"excerpt\":\"Static site generators are amazing tools, hands down! I love working with  Jekyll  and here are some of the features you are missing if you aren't using one: Deduplication of common code blocks Write you code once, include it everywhere Template…\",\"html\":\"<p>Static site generators are amazing tools, hands down! I love working with <a href=\\\"https://jekyllrb.com/\\\">Jekyll</a> and here are some of the features you are missing if you aren't using one:</p>\\n<ul>\\n<li>Deduplication of common code blocks</li>\\n</ul>\\n<p>Write you code once, include it everywhere</p>\\n<ul>\\n<li>Template engine</li>\\n</ul>\\n<p>You know, for loops, if conditionals, etc</p>\\n<ul>\\n<li>Separated data stores</li>\\n</ul>\\n<p>Separation of concerns</p>\\n<ul>\\n<li>Configuration management</li>\\n</ul>\\n<p>Generate multiple versions of your site based on the environment or whatever</p>\\n<p>I have been using Jekyll for a while now and I have to love it. I wouldn't say that it's the best since I've never used some other but I would love to hear from someone that has features that are missing from Jekyll.</p>\\n<p>So on this blog, I would like to present you with my minimal Jekyll configuration that I use on every site I work with. It has the form of a tutorial, so either follows steps below or grab directly the code from GitHub and start coding.</p>\\n<h2>Generate a new site</h2>\\n<p>Start by generating a new Jekyll project. Download and install <code>ruby</code>.</p>\\n<p><code>jekyll new .</code></p>\\n<h2>File and folders structure</h2>\\n<p>At first, you will notice that there is no markup at all. By default, Jekyll uses a theme that hides all that from you. But we need to inject our custom markup. Let's first remove the line <code>theme: minima</code> from _config.yml.</p>\\n<p>You will also notice a <code>_posts</code> folder with an example blog post inside. Let's not spend time on that. Maybe in another post. Delete the whole folder.</p>\\n<p>Now, open <code>about.md</code> and <code>index.md</code>. Those are the main pages of our site the index page and the about page. Every file you put there, Jekyll will generate a new page with that page in that path.</p>\\n<p>About's page content:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token key atrule\\\">layout</span><span class=\\\"token punctuation\\\">:</span> page\\n<span class=\\\"token key atrule\\\">title</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"About\\\"</span>\\n<span class=\\\"token key atrule\\\">permalink</span><span class=\\\"token punctuation\\\">:</span> /about/\\n<span class=\\\"token punctuation\\\">---</span>\\n</code></pre>\\n      </div>\\n<p>Now, this is Jekyll's frontmatter. We are requesting here this page to be generated with the default layout, have that specific title and be the <code>index.html</code> in the root directory. Jekyll will either copy paste every HTML file as is inside the final folder or will generate HTML files as told. This is what we do here, we are instructing Jekyll to generate an <code>index.html</code> file in the root directory.</p>\\n<p>Index page uses the home layout. But what are these layouts? Glad you finally asked. Those layouts were being hidden again by the default time. Let's write our own. Let's have one for start. Create the <code>_layouts/default.html</code> file and put inside:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-xml\\\"><code><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span> <span class=\\\"token attr-name\\\">lang</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>en<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>viewport<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">content</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>width<span class=\\\"token punctuation\\\">=</span>device-width, initial-scale<span class=\\\"token punctuation\\\">=</span>1.0<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">http-equiv</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>X-UA-Compatible<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">content</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ie<span class=\\\"token punctuation\\\">=</span>edge<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>Document<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n{{ content }}\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>This is a basic HTML structure with the <code>{{content}}</code> directive. This directive will render everything from a page that has extend that layout.</p>\\n<p>Great! Now we have a layout as well. I don't like HTML files laying around at the root directory. Let's have a separate folder for our pages. Create a <code>pages</code> folder in the root directory. The underscore demotes that this folder will be processed by Jekyll. Now we need an index page. Create an <code>index</code> folder inside <code>_pages</code> with an index.html file inside. Put inside the below snippet:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token key atrule\\\">layout</span><span class=\\\"token punctuation\\\">:</span> default\\n<span class=\\\"token key atrule\\\">title</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"WOW Jekyll\\\"</span>\\n<span class=\\\"token key atrule\\\">permalink</span><span class=\\\"token punctuation\\\">:</span> index.html\\n<span class=\\\"token punctuation\\\">---</span>\\n&lt;h1<span class=\\\"token punctuation\\\">></span>Hello world&lt;/h1<span class=\\\"token punctuation\\\">></span>\\n</code></pre>\\n      </div>\\n<p>Do the same for the about page. This way, we will keep only configuration files in the root directory and have our content in respective folders.</p>\\n<p>Let's proceed with the 404 page. Same thing, create a <code>pages/404/index.html</code> with contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-yaml\\\"><code><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token key atrule\\\">layout</span><span class=\\\"token punctuation\\\">:</span> default\\n<span class=\\\"token key atrule\\\">title</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"404 Not Found\\\"</span>\\n<span class=\\\"token key atrule\\\">permalink</span><span class=\\\"token punctuation\\\">:</span> 404.html\\n<span class=\\\"token punctuation\\\">---</span>\\n&lt;h1<span class=\\\"token punctuation\\\">></span>Not found&lt;/h1<span class=\\\"token punctuation\\\">></span>\\n</code></pre>\\n      </div>\\n<p>And here's our 404 page that our HTTP server will server whenever doesn't find a corresponding route.</p>\\n<p>Fire <code>jekyll serve</code> and open the displayed link in your browser. You will see our index page.</p>\\n<p>Go to an undefined route and you will see our 404 page.</p>\\n<h2>Webpack integration</h2>\\n<p>Now that we have our basic file structure, we need a way to handle our frontend assets. I am using NPM for my JS dependencies. Same with CSS dependencies plus the SASS preprocessor. Let's first, create a folder to put all these there. Create a <code>_sources</code> folder and <code>js</code> and <code>sass</code> folders inside.</p>\\n<p>Let's first initialize NPM.</p>\\n<p><code>npm init</code></p>\\n<p>follow the instructions until you are finished.</p>\\n<p>Proceed with installing webpack and it's dependencies.</p>\\n<p><code>npm i --save webpack style-loader file-loader extract-text-webpack-plugin css-loader postcss-loader webpack-dev-server sass-loader node-sass webpack</code></p>\\n<p>Now let's install Bootstrap.</p>\\n<p><code>npm i --save bootstrap-sass</code></p>\\n<p>We are going to use a few Bootstrap's core modules like the typography and the grid. I am not going to use Bootstrap's JS modules since they require jQuery.</p>\\n<p>We will use <code>webpack</code> to process the files from that folder and put them inside <code>assets</code> folder. Jekyll will copy that folder inside the final build.</p>\\n<p>Create an <code>webpack.config.js</code> to the root directory. Put there the contents:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">const</span> webpack <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'webpack'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> ExtractTextPlugin <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'extract-text-webpack-plugin'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> path <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'path'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  entry<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    main<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>__dirname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/source/sass/main.scss`</span></span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'index-page'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>__dirname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/source/js/index-page.js`</span></span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  output<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    path<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/path.join(__dirname, ../static/'),\\\"</span>\\n    publicpath<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"/'/',\\\"</span>\\n    filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'js/[name].js'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  module<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    loaders<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token punctuation\\\">{</span>\\n        test<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token regex\\\">/\\\\.scss$/</span><span class=\\\"token punctuation\\\">,</span>\\n        loader<span class=\\\"token punctuation\\\">:</span> ExtractTextPlugin<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">extract</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n          fallback<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'style-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n          use<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n            <span class=\\\"token punctuation\\\">{</span>\\n              loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'css-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n              options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                sourceMap<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n              loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'postcss-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n              options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                sourceMap<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n                plugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>\\n                    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'precss'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n                    <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'autoprefixer'</span><span class=\\\"token punctuation\\\">)</span>\\n                  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token punctuation\\\">}</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n              loader<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'sass-loader'</span><span class=\\\"token punctuation\\\">,</span>\\n              options<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n                sourceMap<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n              <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token punctuation\\\">]</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n        include<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>__dirname<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/source/sass`</span></span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  plugins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ExtractTextPlugin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      filename<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'css/style.css'</span><span class=\\\"token punctuation\\\">,</span>\\n      allChunks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  devtool<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'eval-cheap-module-source-map'</span><span class=\\\"token punctuation\\\">,</span>\\n  devServer<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    inline<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    proxy<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token string\\\">\\\"**\\\"</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"http://localhost:4000\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    host<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'0.0.0.0'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>So webpack will process our main <code>scss</code> file and put it into <code>assets/css/style.css</code>. Jekyll will be able to grab it from there. Also, JS files will be processed, be bundled and put into <code>assets/js</code> as a separate file for each of our pages.</p>\\n<p>Last, we have enabled <code>webpack-dev-server</code> and make it a proxy to Jekyll's host and port. So, in order to use it and have all the good stuff like Hot module replacement we will use that server on development.</p>\\n<p>All we need now is to include them into our layout file.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code><span class=\\\"token doctype\\\">&lt;!DOCTYPE html></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>html</span> <span class=\\\"token attr-name\\\">lang</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>en<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">charset</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>UTF-8<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">name</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>viewport<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">content</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>width<span class=\\\"token punctuation\\\">=</span>device-width, initial-scale<span class=\\\"token punctuation\\\">=</span>1.0<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>meta</span> <span class=\\\"token attr-name\\\">http-equiv</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>X-UA-Compatible<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">content</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>ie<span class=\\\"token punctuation\\\">=</span>edge<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>title</span><span class=\\\"token punctuation\\\">></span></span>{{page.title || site.title}}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>title</span><span class=\\\"token punctuation\\\">></span></span>\\n  &lt;link rel=\\\"stylesheet\\\" href../static/css/main.css\\\">\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>head</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n{{ content }}\\n&lt;script src../static/js/entry.js\\\"><span class=\\\"token script language-javascript\\\"></span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>script</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>body</span><span class=\\\"token punctuation\\\">></span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>html</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>Fire up webpack's dev server:</p>\\n<p><code>./node_modules/.bin/webpack-dev-server --inline --hot</code></p>\\n<h2>NPM Scripts</h2>\\n<p>Now that everything is in place, we want to take advantage of webpack's cool dev features like hot module replacement, etc. To do this we need</p>\\n<h2>Deployment</h2>\",\"id\":\"/home/travis/build/kbariotis/kostasbariotis.com/src/pages/Jekyll + webpack = ❤️/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":5,\"frontmatter\":{\"date\":\"2017-02-25T00:00:00.000Z\",\"path\":\"/drafts/jekyll-webpack/\",\"tags\":null,\"title\":\"Jekyll + webpack = ❤️\",\"draft\":true}}],\"page\":1,\"pagesSum\":4,\"prevPath\":null,\"nextPath\":\"/drafts/page/2\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/drafts-page-1.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/drafts-page-1.json\n// module chunks = 56240726505197"],"sourceRoot":""}